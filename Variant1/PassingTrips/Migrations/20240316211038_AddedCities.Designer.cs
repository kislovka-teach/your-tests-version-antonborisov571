// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PassingTrips;

#nullable disable

namespace PassingTrips.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240316211038_AddedCities")]
    partial class AddedCities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PassingTrips.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("coordinate_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CoordinateId")
                        .HasDatabaseName("ix_cities_coordinate_id");

                    b.ToTable("cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoordinateId = 1,
                            Name = "Москва"
                        },
                        new
                        {
                            Id = 2,
                            CoordinateId = 2,
                            Name = "Казань"
                        });
                });

            modelBuilder.Entity("PassingTrips.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Longitude")
                        .HasColumnType("real")
                        .HasColumnName("longitude");

                    b.Property<float>("Width")
                        .HasColumnType("real")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_coordinates");

                    b.ToTable("coordinates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Longitude = 0f,
                            Width = 0f
                        },
                        new
                        {
                            Id = 2,
                            Longitude = 0f,
                            Width = 50f
                        });
                });

            modelBuilder.Entity("PassingTrips.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer")
                        .HasColumnName("recipient_id");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("review_text");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_reviews_recipient_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_reviews_sender_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("PassingTrips.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrivalCityId")
                        .HasColumnType("integer")
                        .HasColumnName("arrival_city_id");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_time");

                    b.Property<string>("Car")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car");

                    b.Property<int>("DepartureCityId")
                        .HasColumnType("integer")
                        .HasColumnName("departure_city_id");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("departure_time");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<bool>("IsAnimal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_animal");

                    b.Property<bool>("IsMusic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_music");

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("boolean")
                        .HasColumnName("is_smoking");

                    b.Property<int>("MaxCountPassenger")
                        .HasColumnType("integer")
                        .HasColumnName("max_count_passenger");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_trips");

                    b.HasIndex("ArrivalCityId")
                        .HasDatabaseName("ix_trips_arrival_city_id");

                    b.HasIndex("DepartureCityId")
                        .HasDatabaseName("ix_trips_departure_city_id");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_trips_driver_id");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("PassingTrips.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateRegistration")
                        .HasColumnType("date")
                        .HasColumnName("date_registration");

                    b.Property<int>("DrivingExperience")
                        .HasColumnType("integer")
                        .HasColumnName("driving_experience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_phone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegistration = new DateOnly(1, 1, 1),
                            DrivingExperience = 1,
                            FirstName = "Вася",
                            LastName = "Пупкин",
                            Login = "login123",
                            NumberPhone = "1234567890",
                            Password = "qwerty1!Q"
                        });
                });

            modelBuilder.Entity("TripUser", b =>
                {
                    b.Property<int>("PassengerTripsId")
                        .HasColumnType("integer")
                        .HasColumnName("passenger_trips_id");

                    b.Property<int>("PassengersId")
                        .HasColumnType("integer")
                        .HasColumnName("passengers_id");

                    b.HasKey("PassengerTripsId", "PassengersId")
                        .HasName("pk_trip_user");

                    b.HasIndex("PassengersId")
                        .HasDatabaseName("ix_trip_user_passengers_id");

                    b.ToTable("trip_user", (string)null);
                });

            modelBuilder.Entity("PassingTrips.Models.City", b =>
                {
                    b.HasOne("PassingTrips.Models.Coordinate", "Coordinate")
                        .WithMany()
                        .HasForeignKey("CoordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_coordinates_coordinate_id");

                    b.Navigation("Coordinate");
                });

            modelBuilder.Entity("PassingTrips.Models.Review", b =>
                {
                    b.HasOne("PassingTrips.Models.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_recipient_id");

                    b.HasOne("PassingTrips.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_sender_id");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PassingTrips.Models.Trip", b =>
                {
                    b.HasOne("PassingTrips.Models.City", "ArrivalCity")
                        .WithMany()
                        .HasForeignKey("ArrivalCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_cities_arrival_city_id");

                    b.HasOne("PassingTrips.Models.City", "DepartureCity")
                        .WithMany()
                        .HasForeignKey("DepartureCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_cities_departure_city_id");

                    b.HasOne("PassingTrips.Models.User", "Driver")
                        .WithMany("DriverTrips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_users_driver_id");

                    b.Navigation("ArrivalCity");

                    b.Navigation("DepartureCity");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TripUser", b =>
                {
                    b.HasOne("PassingTrips.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("PassengerTripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_user_trips_passenger_trips_id");

                    b.HasOne("PassingTrips.Models.User", null)
                        .WithMany()
                        .HasForeignKey("PassengersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_user_users_passengers_id");
                });

            modelBuilder.Entity("PassingTrips.Models.User", b =>
                {
                    b.Navigation("DriverTrips");
                });
#pragma warning restore 612, 618
        }
    }
}
