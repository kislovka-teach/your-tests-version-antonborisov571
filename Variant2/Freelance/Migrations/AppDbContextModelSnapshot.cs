// <auto-generated />
using System;
using Freelance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Freelance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Freelance.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FreelancerId")
                        .HasColumnType("integer")
                        .HasColumnName("freelancer_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_proposals");

                    b.HasIndex("FreelancerId")
                        .HasDatabaseName("ix_proposals_freelancer_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_proposals_project_id");

                    b.ToTable("proposals", (string)null);
                });

            modelBuilder.Entity("Freelance.Models.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<int>("ReferenceUserId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_freelancers");

                    b.HasIndex("ReferenceUserId")
                        .HasDatabaseName("ix_freelancers_reference_user_id");

                    b.ToTable("freelancers", (string)null);
                });

            modelBuilder.Entity("Freelance.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric")
                        .HasColumnName("budget");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Freelance.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FreelancerId")
                        .HasColumnType("integer")
                        .HasColumnName("freelancer_id");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("FreelancerId")
                        .HasDatabaseName("ix_reviews_freelancer_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_reviews_project_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_reviews_sender_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Freelance.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("integer")
                        .HasColumnName("freelancer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.HasIndex("FreelancerId")
                        .HasDatabaseName("ix_skills_freelancer_id");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Freelance.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "admin123",
                            Role = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Password = "user123",
                            Role = 0,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            Password = "user456",
                            Role = 0,
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("FreelancerProject", b =>
                {
                    b.Property<int>("FreelancersId")
                        .HasColumnType("integer")
                        .HasColumnName("freelancers_id");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer")
                        .HasColumnName("projects_id");

                    b.HasKey("FreelancersId", "ProjectsId")
                        .HasName("pk_freelancer_project");

                    b.HasIndex("ProjectsId")
                        .HasDatabaseName("ix_freelancer_project_projects_id");

                    b.ToTable("freelancer_project", (string)null);
                });

            modelBuilder.Entity("Freelance.Models.Bid", b =>
                {
                    b.HasOne("Freelance.Models.Freelancer", "Freelancer")
                        .WithMany("Proposals")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proposals_freelancers_freelancer_id");

                    b.HasOne("Freelance.Models.Project", "Project")
                        .WithMany("Proposals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proposals_projects_project_id");

                    b.Navigation("Freelancer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Freelance.Models.Freelancer", b =>
                {
                    b.HasOne("Freelance.Models.User", "ReferenceUser")
                        .WithMany()
                        .HasForeignKey("ReferenceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freelancers_users_reference_user_id");

                    b.Navigation("ReferenceUser");
                });

            modelBuilder.Entity("Freelance.Models.Review", b =>
                {
                    b.HasOne("Freelance.Models.Freelancer", "Freelancer")
                        .WithMany("Reviews")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_freelancers_freelancer_id");

                    b.HasOne("Freelance.Models.Project", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_reviews_projects_project_id");

                    b.HasOne("Freelance.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_sender_id");

                    b.Navigation("Freelancer");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Freelance.Models.Skill", b =>
                {
                    b.HasOne("Freelance.Models.Freelancer", null)
                        .WithMany("Skills")
                        .HasForeignKey("FreelancerId")
                        .HasConstraintName("fk_skills_freelancers_freelancer_id");
                });

            modelBuilder.Entity("FreelancerProject", b =>
                {
                    b.HasOne("Freelance.Models.Freelancer", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freelancer_project_freelancers_freelancers_id");

                    b.HasOne("Freelance.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_freelancer_project_projects_projects_id");
                });

            modelBuilder.Entity("Freelance.Models.Freelancer", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("Reviews");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Freelance.Models.Project", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
